# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.10
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_Sensirion_common')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_Sensirion_common')
    _Sensirion_common = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_Sensirion_common', [dirname(__file__)])
        except ImportError:
            import _Sensirion_common
            return _Sensirion_common
        if fp is not None:
            try:
                _mod = imp.load_module('_Sensirion_common', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _Sensirion_common = swig_import_helper()
    del swig_import_helper
else:
    import _Sensirion_common
del _swig_python_version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

STATUS_OK = _Sensirion_common.STATUS_OK
STATUS_FAIL = _Sensirion_common.STATUS_FAIL
NULL = _Sensirion_common.NULL
CRC8_POLYNOMIAL = _Sensirion_common.CRC8_POLYNOMIAL
CRC8_INIT = _Sensirion_common.CRC8_INIT
CRC8_LEN = _Sensirion_common.CRC8_LEN
class Sensirion_common(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Sensirion_common, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Sensirion_common, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _Sensirion_common.delete_Sensirion_common
    __del__ = lambda self: None

    def sensirion_common_generate_crc(self, data, count):
        return _Sensirion_common.Sensirion_common_sensirion_common_generate_crc(self, data, count)

    def sensirion_common_check_crc(self, data, count, checksum):
        return _Sensirion_common.Sensirion_common_sensirion_common_check_crc(self, data, count, checksum)

    def __init__(self):
        this = _Sensirion_common.new_Sensirion_common()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
Sensirion_common_swigregister = _Sensirion_common.Sensirion_common_swigregister
Sensirion_common_swigregister(Sensirion_common)

class sgp_measure(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, sgp_measure, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, sgp_measure, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _Sensirion_common.new_sgp_measure()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def sgp_probe(self):
        return _Sensirion_common.sgp_measure_sgp_probe(self)

    def sgp_iaq_init(self):
        return _Sensirion_common.sgp_measure_sgp_iaq_init(self)

    def sgp_get_driver_version(self):
        return _Sensirion_common.sgp_measure_sgp_get_driver_version(self)

    def sgp_get_configured_address(self):
        return _Sensirion_common.sgp_measure_sgp_get_configured_address(self)

    def sgp_get_feature_set_version(self, feature_set_version, product_type):
        return _Sensirion_common.sgp_measure_sgp_get_feature_set_version(self, feature_set_version, product_type)

    def sgp_get_iaq_baseline(self, baseline):
        return _Sensirion_common.sgp_measure_sgp_get_iaq_baseline(self, baseline)

    def sgp_set_iaq_baseline(self, baseline):
        return _Sensirion_common.sgp_measure_sgp_set_iaq_baseline(self, baseline)

    def sgp_measure_iaq_blocking_read(self, tvoc_ppb, co2_eq_ppm):
        return _Sensirion_common.sgp_measure_sgp_measure_iaq_blocking_read(self, tvoc_ppb, co2_eq_ppm)

    def sgp_measure_iaq(self):
        return _Sensirion_common.sgp_measure_sgp_measure_iaq(self)

    def sgp_read_iaq(self, tvoc_ppb, co2_eq_ppm):
        return _Sensirion_common.sgp_measure_sgp_read_iaq(self, tvoc_ppb, co2_eq_ppm)

    def sgp_measure_tvoc_blocking_read(self, tvoc_ppb):
        return _Sensirion_common.sgp_measure_sgp_measure_tvoc_blocking_read(self, tvoc_ppb)

    def sgp_measure_tvoc(self):
        return _Sensirion_common.sgp_measure_sgp_measure_tvoc(self)

    def sgp_read_tvoc(self, tvoc_ppb):
        return _Sensirion_common.sgp_measure_sgp_read_tvoc(self, tvoc_ppb)

    def sgp_measure_co2_eq_blocking_read(self, co2_eq_ppm):
        return _Sensirion_common.sgp_measure_sgp_measure_co2_eq_blocking_read(self, co2_eq_ppm)

    def sgp_measure_co2_eq(self):
        return _Sensirion_common.sgp_measure_sgp_measure_co2_eq(self)

    def sgp_read_co2_eq(self, co2_eq_ppm):
        return _Sensirion_common.sgp_measure_sgp_read_co2_eq(self, co2_eq_ppm)

    def sgp_measure_signals_blocking_read(self, scaled_ethanol_signal, scaled_h2_signal):
        return _Sensirion_common.sgp_measure_sgp_measure_signals_blocking_read(self, scaled_ethanol_signal, scaled_h2_signal)

    def sgp_measure_signals(self):
        return _Sensirion_common.sgp_measure_sgp_measure_signals(self)

    def sgp_read_signals(self, scaled_ethanol_signal, scaled_h2_signal):
        return _Sensirion_common.sgp_measure_sgp_read_signals(self, scaled_ethanol_signal, scaled_h2_signal)

    def sgp_measure_test(self, test_result):
        return _Sensirion_common.sgp_measure_sgp_measure_test(self, test_result)

    def sgp_set_absolute_humidity(self, absolute_humidity):
        return _Sensirion_common.sgp_measure_sgp_set_absolute_humidity(self, absolute_humidity)
    __swig_destroy__ = _Sensirion_common.delete_sgp_measure
    __del__ = lambda self: None
sgp_measure_swigregister = _Sensirion_common.sgp_measure_swigregister
sgp_measure_swigregister(sgp_measure)


def sgp_measure_signals_blocking_read(scaled_ethanol_signal, scaled_h2_signal):
    return _Sensirion_common.sgp_measure_signals_blocking_read(scaled_ethanol_signal, scaled_h2_signal)
sgp_measure_signals_blocking_read = _Sensirion_common.sgp_measure_signals_blocking_read

def new_ushortp():
    return _Sensirion_common.new_ushortp()
new_ushortp = _Sensirion_common.new_ushortp

def copy_ushortp(value):
    return _Sensirion_common.copy_ushortp(value)
copy_ushortp = _Sensirion_common.copy_ushortp

def delete_ushortp(obj):
    return _Sensirion_common.delete_ushortp(obj)
delete_ushortp = _Sensirion_common.delete_ushortp

def ushortp_assign(obj, value):
    return _Sensirion_common.ushortp_assign(obj, value)
ushortp_assign = _Sensirion_common.ushortp_assign

def ushortp_value(obj):
    return _Sensirion_common.ushortp_value(obj)
ushortp_value = _Sensirion_common.ushortp_value
# This file is compatible with both classic and new-style classes.


